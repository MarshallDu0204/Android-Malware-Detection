import os
import re
import codecs
from tqdm import tqdm
import numpy as np

def get_davikcode_token():
	dalvik_tokens = {}

	with open("DalvikOpcodes.txt") as f:
		for line in f:
			(key, val) = line.split()
			if val not in dalvik_tokens:
				dalvik_tokens[val] = len(dalvik_tokens)

	return dalvik_tokens

def get_opcode_seq(smali_fname,dalvik_opcodes):

	opcode_seq=''

	with open(smali_fname, mode="r") as bigfile:
		reader = bigfile.read()
		for i, part in enumerate(reader.split(".method")):
			add_newline = False
			if i!=0:
				method_part=part.split(".end method")[0]
				method_body = method_part.strip().split('\n')
				for line in method_body:
					if not line.strip().startswith('.') and not line.strip().startswith('#') and line.strip():
						method_line = line.strip().split()
						if method_line[0] in dalvik_opcodes:
							add_newline = True
							opcode_seq += dalvik_opcodes[method_line[0]]
				if  add_newline:
					opcode_seq += '\n'
	return opcode_seq


def byte_apk(path):

	dalvik_opcodes = {}
	with open("DalvikOpcodes.txt") as f:
		for line in f:
			(key, val) = line.split()
			dalvik_opcodes[key] = val

	smali_feature = ''

	pattern =  re.compile(r"\.smali$")
	smaliPathList = []
	dirList = os.listdir(path)
	for tmp_dir in dirList:
		if re.match('smali',tmp_dir):
			smaliPathList.append(tmp_dir)

	for smaliPath in smaliPathList:
		searchDir = os.path.join(path, smaliPath)
		
		for root, dirs, files in os.walk(searchDir):
			for file in files:
				if pattern.findall(file):
					smali_feature += get_opcode_seq(os.path.join(root, file),dalvik_opcodes)

	smali_feature = smali_feature.split('\n')

	dalvik_tokens = get_davikcode_token()

	smali_token = ''

	for line in smali_feature:
		if line !='':
			i = 0
			while i!=len(line)/2:
				tmp_token = line[i*2:(i+1)*2]
				tmp_token = dalvik_tokens[tmp_token]
				smali_token += str(tmp_token) + '|'
				i+=1

	return smali_token

def token_to_img(token_seq,win_size,img_size = 218,step = 1):
	img_mat = np.zeros((img_size,img_size,2))
	token_seq = token_seq.split("|")
	token_seq = token_seq[:-1]
	for i in range(0,len(token_seq)-win_size+1,step):
		segment = token_seq[i:i+win_size]
		for m in range(1,win_size):
			if int(segment[m])<=img_size:
				img_mat[int(segment[m])-1][int(segment[m-1])-1][0] += 1
				for n in range(m):
					if int(segment[n])<=img_size:
						img_mat[int(segment[n])-1][int(segment[m])-1][1] += m-n
					
	return img_mat

def extract_bytecode(apkDir,label,win_size = 10,step = 8):
	apkList = os.listdir(apkDir)

	img_list = []
	label_list = []
	
	for apk in tqdm(apkList):
		apkPath = apkDir+"/"+apk
		try:
			smali_token = byte_apk(apkPath)
			img = token_to_img(smali_token,win_size,step = step)
			img_list.append(img)
			label_list.append(label)
		except:
			print("error")

	return np.asarray(img_list),np.asarray(label_list)


img,label = extract_bytecode("D://new_app/Benign_2015",0)
np.save("Benign_2015_10_8.npy",img)
np.save("Benign_2015_label_10_8.npy",label)

img,label = extract_bytecode("D://new_app/Benign_2016",0)
np.save("Benign_2016_10_8.npy",img)
np.save("Benign_2016_label_10_8.npy",label)

img,label = extract_bytecode("D://new_app/Benign_2017",0)
np.save("Benign_2017_10_8.npy",img)
np.save("Benign_2017_label_10_8.npy",label)

img,label = extract_bytecode("D://new_app/Adware",1)
np.save("Adware_10_8.npy",img)
np.save("Adware_label_10_8.npy",label)

img,label = extract_bytecode("D://new_app/Ransomware",2)
np.save("Ransomware_10_8.npy",img)
np.save("Ransomware_label_10_8.npy",label)

img,label = extract_bytecode("D://new_app/Scareware",3)
np.save("Scareware_10_8.npy",img)
np.save("Scareware_label_10_8.npy",label)

img,label = extract_bytecode("D://new_app/SMSmalware",4)
np.save("SMSmalware_10_8.npy",img)
np.save("SMSmalware_label_10_8.npy",label)