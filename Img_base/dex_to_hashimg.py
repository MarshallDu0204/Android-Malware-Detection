import numpy as np
from simhash import Simhash
import os
import math
import hashlib
from tqdm import tqdm

def extract_dex(path,slice_num,label):
    img_list = []
    label_list = []
    dex_list = os.listdir(path)
    for dex in tqdm(dex_list):
        try:
            img = np.zeros((256,256,3))
            dexpath = path + "/" + dex
            with open(dexpath,'rb') as f:
                dex_file = f.read()
                for i in range(slice_num):
                    dex_slice = dex_file[math.floor(i / slice_num * len(dex_file)):math.floor((i + 1) / slice_num * len(dex_file))]
                    x,y = dex_2_coor(dex_slice)
                    r,g,b = hash_djb2_rgb(dex_slice)
                    img[x][y] = [r,g,b]
            img_list.append(img)
            label_list.append(label)
        except:
            print("error")

    return np.asarray(img_list),np.asarray(label_list)

def hash_djb2_rgb(s):                                                                                                                               
    index = 5381
    for x in s.hex():
        index = (( index << 5) + index) + ord(x)
    rgb = bin(index & 0xFFFFFFFF)[2:]
    if len(rgb)<32:
        rgb = '0'*(32-len(rgb)) + rgb
    r = int(rgb[:8],2)
    g = int(rgb[8:16],2)
    b = int(rgb[16:24],2)

    if r<0:
        r = 0
    if r>255:
        r = 255
    if g<0:
        g = 0
    if g>255:
        g = 255
    if b<0:
        b = 0
    if b>255:
        b = 255

    return r,g,b
    

def dex_2_coor(dex_slice,width = 3):
    dex_list = [dex_slice[i:i + width] for i in range(max(len(dex_slice) - width + 1, 1))]
    weight_list = []
    hash_obj = hashlib.md5()
    for item in dex_list:
        weight = [1]*16
        hash_obj.update(item)
        res = int(hash_obj.hexdigest(),16)
        res = bin(res%65536)
        if len(res)<16:
            res = '0'*(16-len(res)) + res
        for i in range(16):
            if res[i] == '0':
                weight[i] = -1

        weight_list.append(weight)

    weight_mat = np.asarray(weight_list).sum(axis = 0)

    res = ""
    for item in weight_mat:
        if item<0:
            res += '0'
        else:
            res += '1'

    x = int(res[:-8],2)
    y = int(res[-8:],2)

    if x<0:
        x = 0
    if x>255:
        x = 255
    if y<0:
        y = 0
    if y>255:
        y = 255

    return x,y

slice_num = 60000

img,label = extract_dex("D://dex_data/Benign_2015_dex",slice_num,0)
np.save("Benign_2015_60000.npy",img)
np.save("Benign_2015_label_60000.npy",label)

img,label = extract_dex("D://dex_data/Benign_2016_dex",slice_num,0)
np.save("Benign_2016_60000.npy",img)
np.save("Benign_2016_label_60000.npy",label)

img,label = extract_dex("D://dex_data/Benign_2017_dex",slice_num,0)
np.save("Benign_2017_60000.npy",img)
np.save("Benign_2017_label_60000.npy",label)

img,label = extract_dex("D://dex_data/Adware_dex",slice_num,1)
np.save("Adware_60000.npy",img)
np.save("Adware_label_60000.npy",label)

img,label = extract_dex("D://dex_data/Ransomware_dex",slice_num,2)
np.save("Ransomware_60000.npy",img)
np.save("Ransomware_label_60000.npy",label)

img,label = extract_dex("D://dex_data/Scareware_dex",slice_num,3)
np.save("Scareware_60000.npy",img)
np.save("Scareware_label_60000.npy",label)

img,label = extract_dex("D://dex_data/SMSmalware_dex",slice_num,4)
np.save("SMSmalware_60000.npy",img)
np.save("SMSmalware_label_60000.npy",label)
